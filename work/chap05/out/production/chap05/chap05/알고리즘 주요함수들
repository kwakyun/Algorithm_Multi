//미션- 현재여러분들이 알고있는 문자열과 관련된 객체와 함수를 모두 적어보세요.
        String temp = "java:jsp:spring";
        System.out.println(temp);

        //1.문자열의 길이
        System.out.println("temp.length():"+temp.length());
        System.out.println();

        //2.문자열에서 특정문자열의 시작위치
        System.out.println("temp.indexOf(\"java\"):"+temp.indexOf("java"));
        System.out.println("temp.indexOf(\"j\"):"+temp.indexOf("j"));
        System.out.println();

        //3.문자열에서 특정문자열의 끝위치
        System.out.println("temp.lastIndexOf(\"j\"):"+temp.lastIndexOf("j"));
        System.out.println();

        //4.문자열에서 특정문자(char)을 인덱스로 뽑기
        System.out.println("temp.charAt(0) : "+temp.charAt(0));
        System.out.println("temp.charAt(1) : "+temp.charAt(1));
        System.out.println("temp.charAt(temp.length()-1) : "+temp.charAt(temp.length()-1));
        System.out.println();

        //5.문자열을 char[]로 변환하기
//        char[] cs = new char[temp.length()];
//        for (int i = 0; i < cs.length; i++) {
//            cs[i] = temp.charAt(i);
//        }
//        System.out.println(new String(cs));//cs -> String >> java:jsp:spring
        char[] cs = temp.toCharArray();
        System.out.println(cs);//바로출력가능.>> java:jsp:spring
        System.out.println(Arrays.toString(cs));//Arrays 로 출력가능.[j, a, v, a, :, j, s, p, :, s, p, r, i, n, g]

        //6.문자열 뽑기(자르기,추출)
        System.out.println(temp.substring(5));//5번인덱스부터 끝까지 >> jsp:spring
        System.out.println(temp.substring(temp.lastIndexOf("j")));//마지막j부터 끝까지 >> jsp:spring
        System.out.println(temp.substring(temp.lastIndexOf(":")));//마지막콜론부터 끝까지 >> :spring
        System.out.println(temp.substring(temp.lastIndexOf(":")+1));//마지막콜론 다음부터 끝까지 >> spring
        System.out.println(temp.substring(5,7+1));//5부터 원하는 인덱스+1 : jsp
        System.out.println(temp.substring(temp.indexOf(":")+1,temp.lastIndexOf(":")));//:첫번째인덱스부터 :마지막인덱스전까지 : jsp
        System.out.println();

        temp = "java11:jsp22:spring33:javascript44:CSS55:HTML66:한글";
        System.out.println(temp);
        //indexOf와 lastIndexOf만으로는 한계가있다.
        System.out.println(temp.substring(temp.indexOf(":")+1,temp.lastIndexOf(":")));//:첫번째인덱스부터 :마지막인덱스전까지 : jsp

        //7.구분자(패턴)를 이용해서 문자열은 분리해서배열로 반환
        String[] arr = temp.split(":");
        System.out.println(Arrays.toString(arr));
        System.out.println(arr[1]);//jsp

        //8.문자열 변경후 반환(원본이 바뀌지않는다)
        System.out.println(temp.replace("java","Hello"));
        System.out.println(temp.replaceAll(":","-"));
        System.out.println(temp.replaceAll("[0-9]","X"));
        System.out.println(temp.replaceAll("[a-z]","Y"));
        System.out.println(temp.replaceAll("[A-Z]","Z"));
        System.out.println(temp.replaceAll("[a-zA-Z]","?"));
        System.out.println(temp.replaceAll("[가-힣]","*"));
        System.out.println();

        //9.문자열 비교
        temp = "yangSSEM";
        System.out.println(temp.equals("Yangssem"));//대소문자 구분
        System.out.println(temp.equalsIgnoreCase("Yangssem"));//대소문자 구분안함
        System.out.println(temp.contains("yangssem"));//포함하면 참.
        System.out.println(temp.contains("yang"));//포함하면 참.
        System.out.println(temp.compareTo("yangssem"));//대소문자 구분 같으면 0
        System.out.println(temp.compareToIgnoreCase("Yangssem"));//대소문자 구분안함 같으면 0
        System.out.println(temp.startsWith("yang"));//대소문자 구분, 시작하는 문자열이 같으면 참
        System.out.println(temp.endsWith("em"));//대소문자 구분, 끝나는 문자열이 같으면 참
        System.out.println();

        //10.문자열을 바이트배열로 반환
        byte[] bs = temp.getBytes();
        System.out.println(Arrays.toString(bs));

        //11.대문자,소문자를 서로 바꾸기
        System.out.println(temp.toUpperCase());
        System.out.println(temp.toLowerCase());

        //12.문자열 단순병합(연산횟수가 적은 문자열)
        String str1 = "aaa";
        String str2 = "bbb";
        System.out.println(str1 + str2);
        System.out.println(str1.concat(str2));
        System.out.println();

        //13.문자열 대용량으로병합(연산횟수가 많은 문자열)- 엄청난 연산속도
//        StringBuffer sb = new StringBuffer();
        StringBuilder sb = new StringBuilder();
        sb.append(str1);
        sb.append(str2);
        System.out.println(sb.toString());
        //단순병합 속도와 대용량병합 속도 비교 테스트
        //test1();//단순병합
        test2();//대용량병합
        System.out.println();

        //14.문자열의 시작공백과 끝공백 제거
        temp = "   ja va   ";
        System.out.println("temp.length() : "+temp.length());
        System.out.println("temp.trim().length() : "+temp.trim().length());
        System.out.println();


        //15.문자열 뒤집기
        temp = "yangssem";
        //System.out.println(temp.charAt(temp.length()-1-0));//7
        //System.out.println(temp.charAt(temp.length()-1-1));//6
        String answer = "";
        for (int i = temp.length()-1; i >= 0; i--) {
            answer += temp.charAt(i);
        }
        System.out.println(answer);

        char[] cs2 = temp.toCharArray();
        answer = "";
        for (int i = cs2.length-1; i >= 0; i--) {
            answer += cs2[i];
        }
        System.out.println(answer);

        answer = new StringBuilder(new String(cs2)).reverse().toString();
        System.out.println(answer);
        answer = new StringBuilder(temp).reverse().toString();//가장 편리하다.
        System.out.println(answer);

        //16.문자열 반복하기(jdk11: repeat(n))
        String str = "java";
        System.out.println(str.repeat(5));

        //17.공백제거2 - jdk11, strip()
        temp = "   ja va   ";
        System.out.println("temp.length() : "+temp.length());
        System.out.println("temp.strip().length() : "+temp.strip().length());//좌우공백제거
        System.out.println("temp.stripLeading().length() : "+temp.stripLeading().length());//시작공백제거
        System.out.println("temp.stripTrailing().length() : "+temp.stripTrailing().length());//끝공백제거
        System.out.println();

        //18.문자열이 비어있거나 공백만 포함하는지 검증 - isBlank()
        System.out.println(temp.isBlank());
        System.out.println(temp.isEmpty());//"",빈분자인지 검증
        temp = "        ";
        System.out.println(temp.isBlank()); //trim or strip + length==0
        System.out.println(temp.isEmpty());

        //19.String.join(구분자,배열) - 배열에 구분자 넣기
        System.out.println(String.join("-", new String[]{"java","jsp","servlet"}));

        //20.Character 객체를 이용해서 영문 대문자인지, 소문자인지 검증
        temp = "Hello World";
        System.out.println(Character.isUpperCase('A'));
        System.out.println(Character.isLowerCase('a'));
        System.out.println(Character.isUpperCase(temp.charAt(0)));
        System.out.println(Character.isLowerCase(temp.charAt(0)));
        System.out.println();


        //21.Character 객체를 이용해서 영문이냐(알파벳이냐) 검증
        temp = "123abc";
        System.out.println(Character.isAlphabetic(temp.charAt(0)));
        System.out.println(Character.isAlphabetic(temp.charAt(4)));
        System.out.println(Character.isDigit(temp.charAt(0)));

        //22. 시작하는 문자열(temp.charAt(0))이 영문 대소문자 또는 숫자 형태인지 패턴으로 검증.
        temp = "7Aabc";
        System.out.println(String.valueOf(temp.charAt(0)).matches("[a-zA-Z0-9]"));


        //1.java.util.Date
                Date d = new Date();
                System.out.println(d);

                //2.java.sql.Date(주의:동일클래스명을 사용시 동시 import불가능,절대경로명시)
                java.sql.Date d2 = new java.sql.Date(System.currentTimeMillis());
                System.out.println(d2);

                //3.원하는 포멧(Mon Mar 17 14:15:41 KST 2025 >> yyyy-MM-dd HH:mm:ss:SSS)변경하기.
                //SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS");
        //        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss:SSS");
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분 ss초");
                System.out.println(sdf.format(d));

                //4.java.sql.Timestamp
                Timestamp ts = new Timestamp(System.currentTimeMillis());
                System.out.println(ts);
                System.out.println();

                //5.특정 일자 및 시간 설정(주의:월표기는 0월부터11월까지 설정-12로설정하면 해가넘어가서 0월이됨)
                GregorianCalendar gc = new GregorianCalendar(2025,12,27,17,50,10);
                System.out.println(gc);
                System.out.println("gc.get(Calendar.YEAR) : "+gc.get(Calendar.YEAR));
                System.out.println("gc.get(Calendar.MONTH) : "+gc.get(Calendar.MONTH));
                System.out.println("gc.get(Calendar.DAY_OF_MONTH) : "+gc.get(Calendar.DAY_OF_MONTH));
                System.out.println("gc.get(Calendar.HOUR_OF_DAY) : "+gc.get(Calendar.HOUR_OF_DAY));
                System.out.println("gc.get(Calendar.MINUTE) : "+gc.get(Calendar.MINUTE));
                System.out.println("gc.get(Calendar.SECOND) : "+gc.get(Calendar.SECOND));
                System.out.println("gc.get(Calendar.MILLISECOND) : "+gc.get(Calendar.MILLISECOND));
                System.out.println();

                gc = new GregorianCalendar();//시스템날짜
                System.out.println(gc);
                System.out.println("gc.get(Calendar.YEAR) : "+gc.get(Calendar.YEAR));
                System.out.println("gc.get(Calendar.MONTH) : "+gc.get(Calendar.MONTH));
                System.out.println("gc.get(Calendar.DAY_OF_MONTH) : "+gc.get(Calendar.DAY_OF_MONTH));
                System.out.println("gc.get(Calendar.HOUR_OF_DAY) : "+gc.get(Calendar.HOUR_OF_DAY));
                System.out.println("gc.get(Calendar.MINUTE) : "+gc.get(Calendar.MINUTE));
                System.out.println("gc.get(Calendar.SECOND) : "+gc.get(Calendar.SECOND));
                System.out.println("gc.get(Calendar.MILLISECOND) : "+gc.get(Calendar.MILLISECOND));
 //1.절대값
        System.out.println(Math.abs(-1.0));
        System.out.println(Math.abs(-1.0f));
        System.out.println(Math.abs(-10));
        System.out.println(Math.abs(-10L));
        System.out.println();

        //2.원주율
        System.out.println(Math.PI);
        System.out.println();

        //3.버림
        System.out.println(Math.floor(Math.PI));

        //4.올림
        System.out.println(Math.ceil(Math.PI));

        //6.반올림
        System.out.println(Math.round(Math.PI));

        //7.제곱
        System.out.println(Math.pow(10, 2));

        //8.제곱근
        System.out.println(Math.sqrt(100));

        //9.랜덤한 난수(0.0~1.0사이의 실수)
        System.out.println(Math.random());


        //참고:Random객체
        Random r = new Random();
        System.out.println(r.nextInt());
        System.out.println(r.nextInt(3));//0-2
        System.out.println(r.nextBoolean());
        System.out.println(r.nextDouble());//난수


        //10.최대,최소
        System.out.println(Math.max(11,22));
        System.out.println(Math.max(11.11,22.22));
        System.out.println(Math.min(11,22));
        System.out.println(Math.min(11.11,22.22));


//1.정렬 - 오름차순 모든타입
        int[] arr = new int[]{11,2,33,4};
        System.out.println(Arrays.toString(arr));
        Arrays.sort(arr);//오름차순(기본)
        System.out.println(Arrays.toString(arr));

        //2.정렬 - 내림차순 Integer[]와 같은 객체타입만 가능
        Integer[] arr2 = new Integer[]{11,2,33,4};
        Arrays.sort(arr2, Collections.reverseOrder());//내림차순 : int[]는 안됨.
        System.out.println(Arrays.toString(arr2));
        System.out.println();

        //3.배열복사(주소가다르다) - 배열 재할당(주소가같다)과는 다르다.
        int[] copy0 = arr;
        int[] copy1 = Arrays.copyOf(arr, arr.length);
        System.out.println(arr);
        System.out.println(copy0);
        System.out.println(copy1);
        System.out.println(Arrays.toString(copy1));//[2, 4, 11, 33]

        //4.배열 부분(범위)복사
        int[] copy2 = Arrays.copyOfRange(arr, 0,2);//인텍스0~1
        System.out.println(Arrays.toString(copy2));//[2, 4]
        System.out.println();

        //5.배열초기화 및 채우기
        int[] arr3 = new int[5];
        System.out.println(Arrays.toString(arr3));//[0, 0, 0, 0, 0]
        Arrays.fill(arr3, 5);//모두 5로 채우기
        System.out.println(Arrays.toString(arr3));
        System.out.println();

        //6.배열(랩퍼클래스,문자열)을 리스트 컬렉션으로 변환 : int[]불가,Integer[]가능
        //List<Integer> list = Arrays.asList(1,2,3,4,5);//수정불가
        Integer[] arr4 = new Integer[]{1,2,3,4,5};
        List<Integer> list = Arrays.asList(arr4);//수정불가
        System.out.println(list);

//        List<String> list2 = Arrays.asList("a","b","c","d","e","f");//수정불가
        String[] strs = new String[]{"a","b","c","d","e","f"};
        List<String> list2 = Arrays.asList(strs);//수정불가
        System.out.println(list2);

        //7.수정불가 리스트컬렉션을 수정가능 리스트컬렉션으로 변환
        List<Integer> list3 = Arrays.asList(1,2,3,4,5);
        //list3.remove(0);//에러
        System.out.println(list3);
        List<Integer> list4 = new ArrayList<>(list3);//수정가능
        list4.remove(0);
        System.out.println(list4);


        //8.정수 배열의 통계(합계,최소,최대,평균,카운트)
        int[] arr5 = new int[]{1,2,3,4,5};
        System.out.println(Arrays.stream(arr5).count());
        System.out.println(Arrays.stream(arr5).min().getAsInt());
        System.out.println(Arrays.stream(arr5).max().getAsInt());
        System.out.println(Arrays.stream(arr5).sum());
        System.out.println(Arrays.stream(arr5).average().getAsDouble());
        System.out.println(Arrays.stream(arr5).average().orElse(0));
 int[] arr = {1,2,6,7,8,9,3,4,5};
        //1.최대값
//        Arrays.sort(arr);//오름차순(기본)
//        System.out.println(Arrays.toString(arr));
//        System.out.println(arr[arr.length-1]);//최대값
        int max = Arrays.stream(arr).max().getAsInt();
        System.out.println(max);

        //2.최소값
        //System.out.println(arr[0]);//최소값
        int min = Arrays.stream(arr).min().getAsInt();
        System.out.println(min);
        System.out.println();

        Integer[] arr2 = {1,2,6,7,8,9,3,4,5};
        List<Integer> list = Arrays.asList(arr2);
        //1.최대값
//        Collections.sort(list);
//        System.out.println(list);
//        System.out.println(list.get(list.size()-1));
        System.out.println(Collections.max(list));

        //2.최소값
        //System.out.println(list.get(0));
        System.out.println(Collections.min(list));
        System.out.println();

        //1.최대값 제거
        List<Integer> list2 = new ArrayList<>(list);
        System.out.println(list2.remove(list2.size()-1));
        System.out.println(list2);

        //2.최소값 제거
        System.out.println(list2.remove(0));
        System.out.println(list2);

        /// ////////////////////////
        arr = new int[]{6,7,8,9,3,1,2,4,5};
        //for문을 이용해서 최대,최소값을 출력도록 구현하기.
        max = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (max < arr[i]) {
                max = arr[i];
            }
        }
        System.out.println("max: " + max);
        min = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (min > arr[i]) {
                min = arr[i];
            }
        }
        System.out.println("min: " + min);
 //1. 정수 정렬
        Integer[] arr = new Integer[]{6,7,8,9,3,1,2,4,5};
        Arrays.sort(arr);
        System.out.println(Arrays.toString(arr));
        Arrays.sort(arr, Collections.reverseOrder());
        System.out.println(Arrays.toString(arr));
        System.out.println();

        //2. 문자 정렬
        String[] arr2 = new String[]{"b11","22","c55","a66","77","33","44"};
        Arrays.sort(arr2);
        System.out.println(Arrays.toString(arr2));
        Arrays.sort(arr2, Collections.reverseOrder());
        System.out.println(Arrays.toString(arr2));
        System.out.println();

        //3. 객체 정렬
        Person p1 = new Person("kim1",33);
        Person p2 = new Person("kim2",22);
        Person p3 = new Person("kim3",11);
        List<Person> list = new ArrayList<>();
        list.add(p3);
        list.add(p1);
        list.add(p2);
        System.out.println(list);
        list.sort(new Comparator<Person>() {
            @Override
            public int compare(Person o1, Person o2) {
//                return o1.name.compareTo(o2.name);//name으로 순정렬
//                return o2.name.compareTo(o1.name);//name으로 역정렬
//                return o1.age - o2.age;//age로 순정렬
                return o2.age - o1.age;//age로 역정렬
            }
        });
        System.out.println(list);
        System.out.println();

        //4.문자열의 길이로 정렬
        List<String> list1 = Arrays.asList("javascript","css", "servlet", "spring");
        Collections.sort(list1);//영문알파벳 정렬
        System.out.println(list1);
        list1.sort(Comparator.comparingInt(String::length));//문자열의 길이로 정렬
        System.out.println(list1);

        //5.배열에서 가장 긴 문자열만 출력
        System.out.println(list1.get(list1.size()-1));

        //6.스트림을 이용하여 가장 긴 문자열 길이만 출력
        System.out.println(list1.stream().map(String::length).toList());//글자수로 매핍
        System.out.println(list1.stream().map(String::length).max(Integer::compare).get());//긴글자수 반환

        //7.스트림을 이용하여 가장 긴 문자열만  출력
        System.out.println(list1.stream().max(Comparator.comparing(String::length)).get());//긴문자열 반환
 //큰정수 또는 큰실수 들의 연산

        //1.큰정수
        //Integer 또는 Long 에 할당할수있는 값을 벗어날경우에대한 처리객체가 필요하다.
        System.out.println(Integer.MIN_VALUE +" ~ "+Integer.MAX_VALUE);
        System.out.println(Long.MIN_VALUE +" ~ "+Long.MAX_VALUE);

        int i1 = Integer.MAX_VALUE + 1;
        System.out.println(i1); // 4byte 범위를 벗어날 수 없다

        long l1 = 9223372036854775807L;
        System.out.println(l1+1); // 8byte 범위를 벗어날 수 없다
        System.out.println();

        BigInteger bi1 = new BigInteger("2147483647");
        BigInteger bi2 = new BigInteger("1000");
        System.out.println(bi1.add(bi2));
        System.out.println(bi1.subtract(bi2));
        System.out.println(bi1.multiply(bi2));
        System.out.println(bi1.divide(bi2));
        System.out.println(bi1.remainder(bi2));

        bi1 = new BigInteger("9223372036854775807");
        bi2 = new BigInteger("1000");
        System.out.println(bi1.add(bi2));
        System.out.println(bi1.subtract(bi2));
        System.out.println(bi1.multiply(bi2));
        System.out.println(bi1.divide(bi2));
        System.out.println(bi1.remainder(bi2));
        System.out.println(bi1.compareTo(bi2));//값비교 같으면 0
        System.out.println();


        //2.큰실수
        BigDecimal bd1 = new BigDecimal("2147483647.123456789");
        BigDecimal bd2 = new BigDecimal("10000");
        System.out.println(bd1.add(bd2));
        System.out.println(bd1.subtract(bd2));
        System.out.println(bd1.multiply(bd2));
        System.out.println(bd1.divide(bd2));
        System.out.println(bd1.remainder(bd2));
        System.out.println(bd1.compareTo(bd2));//값비교 같으면 0


//자바 스트림이란? : jdk8에 추가된 객체,함수형 프로그래밍을 지향
        //제어문 또는 검색쿼리문 기능을 함수로 대체해서 표현하는것이 가능한 문법을 내포한다.
        //컬렉션과 배열등의 요소들을 참조하여 람다식을 적용할 수 있다.
        //반복수행하는 기능구현이 뛰어나다.

        //예:List내에 있는 임의의 문자열 중에서 a라는 문자가 들어있는 요소들은 몇개(카운팅)?
        List<String> list = Arrays.asList("Helloa", "Worlda","java","css","spring");
        System.out.println(list);

        //1.일반적인 방법으로 카운팅
        int count = 0;
        for (String x : list) {
            System.out.println(x);
            if(x.contains("a")){
                count++;
            }
        }
        System.out.println("Total count: " + count);


        //2.스트림으로 카운팅
        long count2 = list.stream().filter((x)->x.contains("a")).count();
        System.out.println("Total count2: " + count2);

        list = Arrays.asList("aHello", "Worlda","java","acss","springa");
        //a로 시작하는 문자열들의 카운팅.
        count2 = list.stream().filter((x)->x.startsWith("a")).count();
        System.out.println("Total count2: " + count2);

        //a로 끝나는 문자열들의 카운팅.
        count2 = list.stream().filter((x)->x.endsWith("a")).count();
        System.out.println("Total count2: " + count2);

        //3.스트림필터링 결과를 다시 컬렉션으로 반환가능 : ReferencePipeline$2 type
        System.out.println(list.stream().filter((x)->x.endsWith("a")));
        System.out.println();

        Object[] arr = list.stream().filter((x)->x.endsWith("a")).toArray();
        System.out.println(Arrays.toString(arr));

        List<String> list2 = list.stream().filter((x)->x.endsWith("a")).toList();
        System.out.println(list2);

        //참고>별도의 스레드처리가 필요하거나 요소의 개수가 엄~~청 많을때 사용하는 스트림
        count2 = list.parallelStream().filter((x)->x.endsWith("a")).count();
        System.out.println("Total count2: " + count2);

         Double[] ds = new Double[]{1.1,2.2,3.3,4.4};
                //스트림을 사용해서
                //ㄱ. 3이상인 요소들은 몇개?
                List<Double> list = Arrays.asList(ds);
                long count = list.stream().filter((x) -> x >= 3.0).count();
                System.out.println("Total count: " + count);
                list = list.stream().filter((x) ->  x >= 3.0).toList();
                System.out.println(list);
                System.out.println();

                //ㄴ. 각 요소에 10배를 했을때 20이상인 요소는 몇개?
                list = Arrays.asList(ds);//다시 초기화
                count = list.stream().filter((x) -> x * 10 >= 20).count();
                System.out.println("Total count: " + count);

                //List컬렉션으로 치환
                list = list.stream().filter((x) -> x * 10 >= 20).toList();
                System.out.println(list);


  double[] ds = new double[]{1.1,2.2,3.3,4.4};

          //기본타입 배열의 경우는 리스트컬렉션에 직접 할당할 수 없기때문에
          //Arrays.stream() 메소드에 인자로 전달해서 사용가능하다.
          long count = Arrays.stream(ds).filter((x) -> x >= 3.0).count();
          System.out.println("Total count: " + count);

          //Arrays.stream() 필터링 후 객체는 DoublePipeline$8 타입
          System.out.println(Arrays.stream(ds).filter((x) -> x >= 3.0));

          //toArray()메소드로 재할당 가능
          ds = Arrays.stream(ds).filter((x) -> x >= 3.0).toArray();
          System.out.println(Arrays.toString(ds));

          //리스트컬렉션에 할당하기위해서는 boxed()메소드 + toList()를 이용해서 컬렉션배열에 할당가능.
          List<Double> list = Arrays.stream(ds).filter((x) -> x >= 3.0).boxed().toList();
          System.out.println(list);
          System.out.println();


          //int[], Integer[]을 생성해서 스트림필터링 후 위와같이 확인해보세요.
          int[] sus1 = {1,2,3,4,5};

          //3보다 작은 요소들만 출력하기.
          System.out.println(Arrays.stream(sus1).filter((x)->x < 3).boxed().toList());

          Integer[] sus2 = {1,2,3,4,5};
          //3보다 작은 요소들만 출력하기.
          System.out.println(Arrays.asList(sus2).stream().filter((x)->x<3).toList());


      //mapToInt(),mapToDouble(),,,,,.
           //min,max,sum 등을 쉽게 획득할 수 있다.
           List<Double> list = Arrays.asList(1.1, 2.2, 3.3,4.4);
           System.out.println(list.stream().mapToDouble(x->x).min());//OptionalDouble[1.1]
           System.out.println(list.stream().mapToDouble(x->x).min().getAsDouble());//1.1
           System.out.println(list.stream().mapToDouble(x->x).max().getAsDouble());//4.4
           System.out.println(list.stream().mapToDouble(x->x).sum());//11.0
           System.out.println();

           List<Integer> list2 = Arrays.asList(11,22,33,44);
           //min,max,sum 등을 쉽게 획득할 수 있다.
           System.out.println(list2.stream().mapToInt(x->x).sum());
           System.out.println(list2.stream().mapToInt(x->x).min().getAsInt());//11
           System.out.println(list2.stream().mapToInt(x->x).max().getAsInt());//44
           System.out.println();

           /// /기본타입배열을 사용할 경우///
           int[] sus = new int[]{55,66,77};
           System.out.println(Arrays.toString(sus));

           System.out.println(Arrays.stream(sus).sum());//int type
           System.out.println(Arrays.stream(sus).min().getAsInt());
           System.out.println(Arrays.stream(sus).max().getAsInt());
           System.out.println();

           System.out.println(Arrays.stream(sus).mapToLong(x->x).sum());//long type
           System.out.println(Arrays.stream(sus).mapToLong(x->x).min().getAsLong());
           System.out.println(Arrays.stream(sus).mapToLong(x->x).max().getAsLong());

        //배열에 0~9까지 할당하기
              //1.int[] 에 할당하기
              int[] arr = new int[10];
      //        for (int i = 0; i < arr.length; i++) {
      //            arr[i] = i;
      //        }
              Arrays.setAll(arr,i->i);
              System.out.println(Arrays.toString(arr));
              Arrays.setAll(arr,i->i+1);
              System.out.println(Arrays.toString(arr));
              Arrays.setAll(arr,i->(i+1)*10);
              System.out.println(Arrays.toString(arr));
              System.out.println();

              //2.List<Integer> 에 할당하기
              List<Integer> list = new ArrayList<>();
              for (int i = 0; i < arr.length; i++) {
                  list.add(i);
              }
              System.out.println(list);

              //3.정수배열인경우 - IntStream + range 자동할당
              List<Integer> list2 = IntStream.range(0,10).boxed().toList();
              System.out.println(list2);
              System.out.println();

              //forEach(System.out::print) 개행없이 출력가능
              for(Integer x:list2){
                  System.out.print(x);
              }
              System.out.println();
              IntStream.range(0,10).boxed().forEach(System.out::print);

              //forEach(System.out::println) 개행하면서 출력가능
              IntStream.range(0,10).boxed().forEach(System.out::println);
              System.out.println();

              //filter +forEach : 0~9 정수들중 2의 배수들만 출력하기.
              IntStream.range(0,10).boxed().filter(x->x%2==0).forEach(System.out::print);
              System.out.println();

              //map 각요소의 값을 10배로 변경하기.
              System.out.println(IntStream.range(0,10).boxed().map(x->x*10).toList());

              //map + forEach
              IntStream.range(0,10).boxed().map(x->x*10).forEach(System.out::print);


         List<Integer> list = new ArrayList<>();
                list.add(1);
                list.add(2);
                list.add(3);
                System.out.println(list);
                System.out.println(list.stream().toList());

                //Stream객체에 데이터add하는 기능이 있다.
                List<Object> list2 = Stream.builder().add(1).add(2).add(3).build().toList();
                System.out.println(list2);
                System.out.println(Stream.builder().add(1.1).add(2.2).add(3.3).build().toList());
                //필터링가능
                System.out.println(Stream.builder().add(1.1).add(2.2).add(3.3).build().filter(x->(Double)x<2).toList());
                //문자열도 할당가능
                System.out.println(Stream.builder().add("kim").add("lee").add("yang").build().filter(x->((String)x).length()==4).toList());
                //매핑도 가능
                System.out.println(Stream.builder().add("kim").add("lee").add("yang").build().map(x-> "Hello "+ x.toString()).toList());
                System.out.println();

                //여러타입도 add가능
                System.out.println(Stream.builder().add(11).add(22.22).add("yang").build().toList());

                //제네릭선언을 이용해서 add하는 타입을 제한할 수 있다.<Object>는 생략가능
                System.out.println(Stream.<Object>builder().add(11).add(22.22).add("yang").build().toList());
                System.out.println(Stream.<Integer>builder().add(11).add(22).add(33).build().toList());
                System.out.println(Stream.<String>builder().add("11").add("22.22").add("yang").build().toList());

 //Hello문자열이 n개 들어있는 컬렉션 배열생성하기
        List<String> list = new ArrayList<>();
        int n = 5;
        for (int i = 0; i < n; i++) {
            list.add("Hello");
        }
        System.out.println(list);

        //World 문자열이 n개 들어있는 문자열 배열생성하기
        String[] arr = new String[n];
        Arrays.fill(arr, "World");
        System.out.println(Arrays.toString(arr));

        //스트림을 이용해서 배열의 요소 생성하기. generate기능 + limit
        //[java, java, java, java, java]
        System.out.println(Stream.generate(()->"java").limit(5).toList());
        List<String> list2 = Stream.generate(()->"java").limit(5).toList();
        System.out.println(list2);

        String[] arr2 = Stream.generate(()->"java").limit(5).toArray(String[]::new);
        System.out.println(Arrays.toString(arr2));
        System.out.println();

        //스트림을 이용(generate)해서 배열의 요소 생성하기  >> [10,10,10,10,10]
        System.out.println(Stream.generate(()->10).limit(5).toList());

        //스트림을 이용(iterate)해서 배열의 요소 생성하기  >> [0,1,2,3,4]
        System.out.println(Stream.iterate(0, x->x).limit(5).toList());//[0,0,0,0,0]
        System.out.println(Stream.iterate(0, x->x+1).limit(5).toList());//[0,1,2,3,4]
        System.out.println(Stream.iterate(1, x->x+1).limit(5).toList());//[1,2,3,4,5]
        System.out.println(Stream.iterate(0, x->x+10).limit(5).toList());//[0, 10, 20, 30, 40]
        System.out.println(Stream.iterate(1, x->x+10).limit(5).toList());//[1, 11, 21, 31, 41]
        System.out.println(Stream.iterate(1, x->x*10).limit(5).toList());//[1, 10, 100, 1000, 10000]
        System.out.println();

        //랜덤객체를 이용해서 랜덤한 정수값들을 배열에 할당하기.
        List<Integer> list3 = new ArrayList<>();
        Random random = new Random();
        for (int i = 0; i < 5; i++) {
            list3.add(random.nextInt());
        }
        System.out.println(list3);
        //랜덤객체를 이용(ints)해서 랜덤한 정수값들을 배열에 할당하기.
        System.out.println(new Random().ints(5).boxed().toList());

        //랜덤객체를 이용(doubles)해서 랜덤한 난수값들을 배열에 할당하기.
        System.out.println(new Random().doubles(5).boxed().toList());


        //미션 : 문자열 >>>  java:spring:html:css
                //주어진 문자열을 이용해서 's'가 들어있는 문자열만 배열에 할당하고 출력하기
                //스트림 사용 할 것.
                String str = "java:spring:html:css";
                String[] arr = str.split(":");
                List<String> list = Arrays.asList(arr);
                System.out.println(list);
                System.out.println(list.stream().filter((x)->x.contains("s")).toList());
                System.out.println(Arrays.asList(str.split(":")).stream().filter((x)->x.contains("s")).toList());
                System.out.println();


                //패턴객체를 이용해서 스트림처리가능
                String[] arr2 = Pattern.compile(":").split(str);
                System.out.println(Arrays.asList(arr2));
                System.out.println(Pattern.compile(":").splitAsStream(str).filter((x)->x.contains("s")).toList());


                //스트림을 이용하여 가장 긴 문자열 길이만 출력
                List<String> list1 = Arrays.asList("javascript","css", "servlet", "spring");
                System.out.println(list1.stream().map(String::length).toList());//글자수로 매핍
                System.out.println(list1.stream().map(String::length).max(Integer::compare).get());//긴글자수 반환

                //스트림을 이용하여 가장 긴 문자열만  출력
                System.out.println(list1.stream().max(Comparator.comparing(String::length)).get());//긴문자열 반환


        //텍스트파일을 읽어오는 스트림 구현하기.
                String path = "C:\\MULTI_EDU_01\\java\\work\\java29_Stream\\src\\test\\com\\test.txt";

                try {
                    //라인별로 리스트컬렉션에 할당하기
                    List<String> list = Files.lines(
                            Paths.get(path),
                            Charset.forName("UTF-8"))
                            .toList();
                    System.out.println(list);

                    //한줄한줄 출력하기
                    Files.lines(
                            Paths.get(path),
                            Charset.forName("UTF-8"))
                            .forEach(System.out::println);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }

최소공배수 구하기 공식 :
x * y / 최대공약수


짝수 피보나치 :
int limit = 4000000; //최대값 설정
        int a = 1;
        int b = 2;
        int sum = 0;

        while(b <= limit){
            if(b%2 == 0){ //짝수인지 확인
                sum += b;
            }
            //다음 피보나치 항 계산
            int next = a + b;
            a = b;
            b = next;

        }

